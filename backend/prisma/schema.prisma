// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}


model User {
  id                   Int             @id @default(autoincrement())
  email                String          @unique
  password             String
  role                 Role            // Role can be 'MENTOR' or 'MENTEE'
  createdAt            DateTime        @default(now())
  updatedAt            DateTime        @updatedAt
  profile              Profile?
  connections          Connection[]    @relation("UserConnections")
  requests             Connection[]    @relation("UserRequests")
  notifications        Notification[]
  matchingPreference   MatchingPreference?
    @@map("user") 
}

enum Role {
  MENTOR
  MENTEE
}

model Profile {
  id          Int      @id @default(autoincrement())
  userId      Int      @unique
  user        User     @relation(fields: [userId], references: [id])
  name        String
  bio         String?
  avatarUrl   String?  
  isComplete  Boolean  @default(false) // checks if the profile is complete
  skills      ProfileSkill[]
  interests   ProfileInterest[]
  @@map("profile")
}

model Skill {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  profiles    ProfileSkill[]
  preferences MatchingPreferenceSkill[]
  @@map("skill")
}

model Interest {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  profiles    ProfileInterest[]
  preferences MatchingPreferenceInterest[]
  @@map("interest")
}

model ProfileSkill {
  profileId   Int
  skillId     Int
  profile     Profile  @relation(fields: [profileId], references: [id])
  skill       Skill    @relation(fields: [skillId], references: [id])
  @@unique([profileId, skillId])
  @@map("profileskill")
}

model ProfileInterest {
  profileId   Int
  interestId  Int
  profile     Profile   @relation(fields: [profileId], references: [id])
  interest    Interest  @relation(fields: [interestId], references: [id])
  @@unique([profileId, interestId])
  @@map("profileinterest")
}

model Connection {
  id          Int      @id @default(autoincrement())
  mentorId    Int      // Mentor's User ID
  mentor      User     @relation("UserConnections", fields: [mentorId], references: [id])
  menteeId    Int      // Mentee's User ID
  mentee      User     @relation("UserRequests", fields: [menteeId], references: [id])
  status      ConnectionStatus @default(PENDING)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  @@map("connection")
}

enum ConnectionStatus {
  PENDING
  ACCEPTED
  DECLINED
}

model Notification {
  id          Int              @id @default(autoincrement())
  userId      Int              // User receiving the notification
  user        User             @relation(fields: [userId], references: [id])
  type        NotificationType
  isRead      Boolean          @default(false)
  createdAt   DateTime         @default(now())
  @@map("notification")
}

enum NotificationType {
  CONNECTION_REQUEST
  CONNECTION_ACCEPTED
  CONNECTION_DECLINED
  PROFILE_UPDATE
}

model MatchingPreference {
  id          Int      @id @default(autoincrement())
  userId      Int      @unique
  user        User     @relation(fields: [userId], references: [id])
  skills      MatchingPreferenceSkill[]
  interests   MatchingPreferenceInterest[]
  preferredRole Role   // Single Role: MENTOR or MENTEE
  @@map("matchingpreference")
}

model MatchingPreferenceSkill {
  matchingPreferenceId Int
  skillId              Int
  matchingPreference   MatchingPreference @relation(fields: [matchingPreferenceId], references: [id])
  skill                Skill              @relation(fields: [skillId], references: [id])
  @@unique([matchingPreferenceId, skillId])
  @@map("matchingpreferenceskill")
}

model MatchingPreferenceInterest {
  matchingPreferenceId Int
  interestId           Int
  matchingPreference   MatchingPreference @relation(fields: [matchingPreferenceId], references: [id])
  interest             Interest           @relation(fields: [interestId], references: [id])
  @@unique([matchingPreferenceId, interestId])
  @@map("matchingpreferenceinterest")
}
